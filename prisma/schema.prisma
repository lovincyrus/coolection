generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
  lists     List[]
  tags      Tag[]

  @@map("user")
}

model Item {
  id          String                 @id @default(uuid())
  url         String?
  title       String
  description String?
  content     String?
  image       String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean                @default(false)
  type        String                 @default("website")
  metadata    Json?
  embedding   Unsupported("vector")?
  userId      String
  user        User                   @relation(fields: [userId], references: [id])
  lists       ItemList[]
  tags        ItemTag[]

  @@index([userId])
  @@map("item")
}

model List {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean    @default(false)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  items       ItemList[]

  @@index([userId])
  @@map("list")
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  items     ItemTag[]

  @@unique([userId, name])
  @@index([userId])
  @@map("tag")
}

model ItemTag {
  item   Item   @relation(fields: [itemId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  itemId String
  tag    Tag    @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId  String

  @@unique([itemId, tagId])
  @@index([itemId])
  @@index([tagId])
  @@map("item_tag")
}

model ItemList {
  item   Item   @relation(fields: [itemId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  list   List   @relation(fields: [listId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  itemId String
  listId String

  @@unique([itemId, listId])
  @@index([itemId])
  @@index([listId])
  @@map("item_list")
}
